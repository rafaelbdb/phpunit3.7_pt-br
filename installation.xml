<?xml version="1.0" encoding="utf-8" ?>

<chapter id="installation">
  <title>Instalando o PHPUnit</title>

  <para>
    Existem três formas suportadas de instalar o PHPUnit. Você pode usar o Instalador <ulink
    url="http://pear.php.net/manual/en/guide.users.commandline.cli.php">PEAR
    Installer</ulink> ou <ulink url="http://getcomposer.org/">Composer</ulink>
    para baixar e instalar o PHPUnit assim como suas dependências. Você também pode baixar um <ulink url="http://php.net/phar">PHP Archive (PHAR)</ulink> do PHPUnit que tem todas as dependências exigidas (assim como algumas opcionais) do PHPUnit em um único arquivo.
  </para>

  <note>
    <para>
      O suporte ao Composer e PHP Archive (PHAR) foi adicionado no PHPUnit 3.7 (tido como estável desde o PHPUnit 3.7.5). Versões anteriores do PHPUnit não estão disponíveis através desses canais de distribuição.
    </para>
  </note>

  <note>
    <para>
      O PHPUnit 3.7 exige PHP 5.3.3 (ou superior) mas PHP 5.4.7 (ou superior) é altamente recomendável.
    </para>

    <para>
      A biblioteca PHP_CodeCoverage que é usada pelo PHPUnit para coletar e processar a informação de cobertura de código, depende do Xdebug 2.0.5 (ou superior) mas o Xdebug 2.2.0 (ou superior) é altamente recomendável.
    </para>
  </note>

  <section id="installation.pear">
    <title>PEAR</title>

    <para>
      Os dois comandos seguintes (que talvez você tenha que executar como
      <literal>root</literal>) são todo o necessário para instalar o PHPUnit usando o Instalador PEAR:
    </para>

    <screen><userinput>pear config-set auto_discover 1</userinput>
<userinput>pear install pear.phpunit.de/PHPUnit</userinput></screen>

    <caution>
      <para>
        Dependendo da distribuição do seu Sistema Operacional e/ou seu ambiente PHP, você pode ter que instalar o PEAR ou atualizar sua instalação PEAR já existente antes que você possa proceder com as instruções desta seção.
      </para>

      <para>
        <userinput>sudo pear upgrade PEAR</userinput> geralmente é o suficiente para atualizar uma instalação PEAR existente. O <ulink
        url="http://pear.php.net/manual/en/installation.getting.php">Manual do PEAR</ulink>
        explica como fazer uma instalação nova do PEAR.
      </para>
    </caution>
  </section>

  <section id="installation.composer">
    <title>Composer</title>

    <para>
      Para adicionar o PHPUnit como uma dependência local por-projeto ao seu projeto, simplesmente adicione a dependência que está em <literal>phpunit/phpunit</literal> ao arquivo
      <filename>composer.json</filename> do seu projeto. Aqui está um exemplo mínimo de um arquivo
      <filename>composer.json</filename> que apenas define uma dependência em tempo de desenvolvimento do PHPUnit 3.7:
    </para>

    <programlisting><![CDATA[{
"require-dev": {
"phpunit/phpunit": "3.7.*"
}
}]]></programlisting>

    <para>
      Para uma instalação autônoma para um sistema inteiro via Composer, um
      <filename>composer.json</filename> similar ao mostrado abaixo pode ser usado para um diretório arbitrário.
    </para>

    <programlisting><![CDATA[{
"name": "phpunit",
"description": "PHPUnit",
"require": {
"phpunit/phpunit": "3.7.*"
},
"config": {
"bin-dir": "/usr/local/bin/"
}
}]]></programlisting>
  </section>

  <section id="installation.phar">
    <title>PHP Archive (PHAR)</title>

    <para>
      Você também pode baixar um PHP Archive (PHAR) do PHPUnit que tem todas as dependências exigidas (assim como algumas opcionais) do PHPUnit em apenas um arquivo
    </para>

    <screen><userinput>wget http://pear.phpunit.de/get/phpunit.phar</userinput>
<userinput>chmod +x phpunit.phar</userinput></screen>
  </section>

  <section id="installation.optional-packages">
    <title>Pacotes opcionais</title>

    <para>
      Os seguintes pacotes opcionais estão disponíveis:
    </para>

    <variablelist>
      <varlistentry>
        <term>
          <literal>DbUnit</literal>
        </term>
        <listitem>
          <para>
            porta DbUnit para PHP/PHPUnit para suportar interação com o banco de dados de teste.
          </para>

          <para>
            Este pacote pode ser instalado via PEAR usando o seguinte comando:
          </para>

          <screen><userinput>pear install phpunit/DbUnit</userinput></screen>

          <para>
            Este pacote pode ser instalado via Composer adicionando a seguinte dependência
            <literal>"require-dev"</literal>:
          </para>

          <screen><userinput>"phpunit/dbunit": ">=1.2"</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHP_Invoker</literal>
        </term>
        <listitem>
          <para>
            Uma classe utilitária para invocações com limite de tempo. Este pacote é exigido para forçar limites de tempo dos testes de um modo específico.
          </para>

          <para>
            Este pacote pode ser instalado usando o seguinte comando:
          </para>

          <screen><userinput>pear install phpunit/PHP_Invoker</userinput></screen>

          <para>
            Este pacote pode ser instalado via Composer adicionando a seguinte dependência
            <literal>"require-dev"</literal>:
          </para>

          <screen><userinput>"phpunit/php-invoker": "*"</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_Selenium</literal>
        </term>
        <listitem>
          <para>
            Integração do Selenium RC para PHPUnit.
          </para>

          <para>
            Este pacote pode ser instalado via PEAR usando o seguinte comando:
          </para>

          <screen><userinput>pear install phpunit/PHPUnit_Selenium</userinput></screen>

          <para>
            Este pacote pode ser instalado via Composer adicionando a seguinte dependência
            <literal>"require-dev"</literal>:
          </para>

          <screen><userinput>"phpunit/phpunit-selenium": ">=1.2"</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_Story</literal>
        </term>
        <listitem>
          <para>
            Executor de testes baseados em histórico para Desenvolvimento Guiado por Comportamentos com PHPUnit.
          </para>

          <para>
            Este pacote pode ser instalado via PEAR usando o seguinte comando:
          </para>

          <screen><userinput>pear install phpunit/PHPUnit_Story</userinput></screen>

          <para>
            Este pacote pode ser instalado via Composer adicionando a seguinte dependência
            <literal>"require-dev"</literal>:
          </para>

          <screen><userinput>"phpunit/phpunit-story": "*"</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_SkeletonGenerator</literal>
        </term>
        <listitem>
          <para>
            Ferramenta que gera classes de esqueleto de teste a partir das classes dos códigos de produção e vice-versa.
          </para>

          <para>
            Este pacote pode ser instalado usando o seguinte comando:
          </para>

          <screen><userinput>pear install phpunit/PHPUnit_SkeletonGenerator</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_TestListener_DBUS</literal>
        </term>
        <listitem>
          <para>
            Um ouvinte de testes que envia eventos para DBUS.
          </para>

          <para>
            Este pacote pode ser instalado usando o seguinte comando:
          </para>

          <screen><userinput>pear install phpunit/PHPUnit_TestListener_DBUS</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_TestListener_XHProf</literal>
        </term>
        <listitem>
          <para>
            Um ouvinte de testes que usa XHProf para perfilar automaticamente o código de teste.
          </para>

          <para>
            Este pacote pode ser instalado usando o seguinte comando:
          </para>

          <screen><userinput>pear install phpunit/PHPUnit_TestListener_XHProf</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_TicketListener_Fogbugz</literal>
        </term>
        <listitem>
          <para>
            Um ouvinte de tickets que interage com a API de problemas Fogbugz.
          </para>

          <para>
            Este pacote pode ser instalado usando o seguinte comando:
          </para>

          <screen><userinput>pear install phpunit/PHPUnit_TicketListener_Fogbugz</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_TicketListener_GitHub</literal>
        </term>
        <listitem>
          <para>
            Um ouvinte de tickets que interage com a API de problemas do GitHub.
          </para>

          <para>
            Este pacote pode ser instalado usando o seguinte comando:
          </para>

          <screen><userinput>pear install phpunit/PHPUnit_TicketListener_GitHub</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_TicketListener_GoogleCode</literal>
        </term>
        <listitem>
          <para>
            Um ouvinte de tickets que interage com a API de problemas do Google Code.
          </para>

          <para>
            Este pacote pode ser instalado usando o seguinte comando:
          </para>

          <screen><userinput>pear install phpunit/PHPUnit_TicketListener_GoogleCode</userinput></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <literal>PHPUnit_TicketListener_Trac</literal>
        </term>
        <listitem>
          <para>
            Um ouvinte de tickets que interage com a API de problemas do Track.
          </para>

          <para>
            Este pacote pode ser instalado usando o seguinte comando:
          </para>

          <screen><userinput>pear install phpunit/PHPUnit_TicketListener_Trac</userinput></screen>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="installing.upgrading">
    <title>Atualizando</title>

    <para>
      Esta seção serve como uma coleção de problemas menores de BC pelos quais alguém poderia passar ao atualizar do PHPUnit 3.6 para o PHPUnit 3.7.
    </para>

    <para>
      A atualização deve tanto ser fácil quanto trabalhar sem qualquer problema, já que foi testada em todos os principais frameworks OpenSource e não houve qualquer problema com eles. Ainda assim, cada projeto é diferente e se você ainda não experimentou uma das versões candidatas a lançamento e enfrentou um problema, este documento pode fornecer alguma ajuda.
    </para>

    <variablelist>
      <varlistentry>
        <term><emphasis role="strong">Remoção do obsoleto OutputTestCase</emphasis></term>
        <listitem>
          <para>
            A classe <literal>PHPUnit_Extensions_OutputTestCase</literal> foi removida. O PHPUnit 3.6 emitia uma notificação de obsolescência quando era usada. Para ver como a saída pode ser testada agora, veja
            <xref linkend="writing-tests-for-phpunit.output" />.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis role="strong">O diretório de trabalho atual será restaurado após cada caso de teste</emphasis></term>
        <listitem>
          <para>
            Se um teste mudasse o diretório de trabalho atual
            (<literal>cwd</literal>) o PHPUnit incorria em erros quando gerava a cobertura da saída de código. Agora que o cwd é restaurado após cada caso de teste, você pode descobrir se um dos seus testes depende de outro teste alterando o cwd. Algo que não é desejável de qualquer forma, e deveria ser fácil de resolver.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis role="strong">Ouvintes de Teste disparam uma chamada de auto-carregamento</emphasis></term>
        <listitem>
          <para>
            Ao usar ouvintes de testes como descrito em
            <xref linkend="appendixes.configuration.test-listeners"/>, o PHPUnit ignorava silenciosamente os ouvintes de teste perdidos e era bem difícil para o usuário resolver esses problemas. Agora uma chamada de auto-carregamento será disparada tentando localizar a classe. Se seu auto-carregador produzir um erro quando ele não encontrar um ouvinte de teste, você poderá incorrer em um problema aqui. Remover o ouvinte ou confirmar que ele está sendo carregado em seu
            <literal>bootstrap.php</literal> vai resolver isso.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis role="strong">Parâmetros para objetos falsos não são mais clonáveis</emphasis></term>
        <listitem>
          <para>
            Anteriormente todos os parâmetros de objetos eram clonados quando falsificados. Isso causava problemas quando testes tentavam verificar se o mesmo objeto foi passado ou não a um método e outro problema com objetos não-clonáveis. Como uma longa e constante requisição de função, este comportamento foi mudado por muitos.
            <xref linkend="test-doubles.mock-objects.examples.clone-object-parameters-usecase.php" />
            mostra onde a nova implementação pode ser útil.
            <xref linkend="test-doubles.mock-objects.examples.enable-clone-object-parameters.php" />
            mostra como voltar para o comportamento anterior.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis role="strong">
          <literal>addUncoveredFilesFromWhitelist</literal>
          foi substituído por
          <literal>processUncoveredFilesFromWhitelist</literal></emphasis>
        </term>
        <listitem>
          <para>
            Ao gerar uma cobertura de código e usar
            <literal><![CDATA[<whitelist addUncoveredFilesFromWhitelist="true">]]></literal>
            todos os arquivos da lista-branca eram incluídos pelo PHPUnit. Esse era um problema para pessoas com código executável nesses arquivos. O PHPUnit agora vai escanear o arquivo e descobrir qual código é executável e qual não é, sem incluí-lo. Isto pode levar a diferentes relatórios de cobertura.
          </para>
          <para>
            Para voltar ao antigo comportamento a configuração
            <literal><![CDATA[<whitelist processUncoveredFilesFromWhitelist=="true">]]></literal>
            pode ser usada. Se você quer o comportamento com PHPUnit 3.6 e 3.7 é possível usar ambas as configurações por um tempo.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis role="strong">
          Valor padrão de <literal>cacheTokens</literal> mudou para
          <literal>false</literal></emphasis>
        </term>
        <listitem>
          <para>
            Desde o PHPUnit <literal>3.7.2</literal> desligamos o cache de arquivos tokenizados por padrão. Ao processar coberturas de código para projetos grandes esse cache consumia muita memória e devido à mudança no comportamento da lista-branca, era problemático para pessoas com bases de código com mais de alguns milhares de classes.
          </para>
          <para>
            Se seu projeto é menor ou você tem memória suficiente você vai ganhar um benefício em tempo de execução por adicionar <literal>cacheTokens="true"</literal>
            no seu arquivo <literal>phpunit.xml</literal>. Veja
            <xref linkend="appendixes.configuration.phpunit"/>.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</chapter>
