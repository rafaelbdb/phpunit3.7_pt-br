<?xml version="1.0" encoding="utf-8" ?>

<chapter id="automating-tests">
  <title>Automatizando Testes</title>

  <para>
    Mesmo bons programadores cometem erros. A diferença entre um bom programador e um mau programador é que o bom programador usa testes para detectar seus erros o mais cedo possível. Quanto antes você testar por um erro, maiores são suas chances de encontrá-lo e consertá-lo. Isso explica porque deixar os testes para um momento logo antes do lançamento do programa é tão problemático. A maioria dos erros nem sequer chega a ser encontrado, e o custo de consertar aqueles que você encontra é tão alto que você tem que fazer uma triagem com os erros porque você simplesmente não consegue consertar todos.
  </para>

  <para>
    <indexterm><primary>Teste Unitário</primary></indexterm>

    Testar com o PHPUnit não é uma atividade totalmente diferente do que você já costuma fazer. É apenas uma forma diferente de fazê-lo. A diferença está entre <emphasis>testar</emphasis>, isto é, verificar que seu programa se comporta como o esperado, e <emphasis>fazer uma bateria de testes</emphasis>, fragmentos de código executáveis que automaticamente testam se as partes (unidades) do programa estão corretas. Esses fragmentos de código executáveis são chamados de testes unitários.
  </para>

  <para>
    Neste capítulo vamos de um simples código de teste baseado em <literal>print</literal>até um teste totalmente automatizado. Imagine que nos peçam para testar um <literal>vetor</literal>embutido do PHP. Uma pequena funcionalidade a se testar é a função <literal>count()</literal>. Para um vetor criado recentemente esperamos que a função <literal>count()</literal> retorne
    <literal>0</literal>Após adicionarmos um elemento, <literal>count()</literal>
    deverá retornar <literal>1</literal>.
    <xref linkend="automating-tests.examples.array-test.php" /> mostra o que queremos testar.
  </para>

  <example id="automating-tests.examples.array-test.php">
    <title>Testando operações de vetores</title>
    <programlisting><![CDATA[<?php
$componente = array();
// espera-se que $componente esteja vazio.

$componente[] = 'elemento';
// espera-se que $componente contenha um elemento.
?>]]></programlisting>
  </example>

  <para>
    Um jeito bem simples de verificar se estamos obtendo os resultados que esperamos é imprimir o resultado de <literal>count()</literal> antes e depois de adicionar o elemento (veja
    <xref linkend="automating-tests.examples.array-test2.php" />).
    Se obtivermos <literal>0</literal> e depois <literal>1</literal>,
    <literal>array</literal> e <literal>count()</literal> se comportaram como esperado.
  </para>

  <example id="automating-tests.examples.array-test2.php">
    <title>Usando print para testar operações de um vetor</title>
    <programlisting><![CDATA[<?php
$componente = array();
print count($componente) . "\n";

$componente[] = 'elemento';
print count($componente) . "\n";
?>]]></programlisting>
    <screen>0
1</screen>
  </example>

  <para>
    Agora gostaríamos de mudar de testes que exigem interpretação manual para testes que podem executar automaticamente. Em <xref linkend="automating-tests.examples.array-test3.php" />, escrevemos a comparação do valor esperado e do real em nosso código de teste e imprimimos <literal>ok</literal> se os valores forem iguais. Se alguma vez virmos uma mensagem
    <literal>não ok</literal> saberemos que algo está errado.
  </para>

  <example id="automating-tests.examples.array-test3.php">
    <title>Comparando os valores esperado e real para testar operações de vetores</title>
    <programlisting><![CDATA[<?php
$componente = array();
print count($componente) == 0 ? "ok\n" : "não ok\n";

$componente[] = 'elemento';
print count($componente) == 1 ? "ok\n" : "não ok\n";
?>]]></programlisting>
    <screen>ok
ok</screen>
  </example>

  <para>
    <indexterm><primary>Asserções</primary></indexterm>

    Agora fatoramos a saída de comparação dos valores esperado e real em uma função que gera uma Exceção (Exception) onde há uma discrepância
    (<xref linkend="automating-tests.examples.array-test4.php" />). Isso nos traz dois benefícios: a escrita dos testes se torna mais fácil e só obteremos saída quando algo estiver errado.
  </para>

  <example id="automating-tests.examples.array-test4.php">
    <title>Usando uma função de asserção para testar operações de vetores</title>
    <programlisting><![CDATA[<?php
$componente = array();
assertTrue(count($componente) == 0);

$componente[] = 'elemento';
assertTrue(count($componente) == 1);

function assertTrue($condicao)
{
if (!$condicao) {
throw new Exception('Asserção falhou.');
}
}
?>]]></programlisting>
  </example>

  <para>
    <indexterm><primary>Teste Automatizado</primary></indexterm>

    O teste agora está totalmente automatizado. Em vez de apenas
    <emphasis>testar</emphasis> como fizemos em nossa primeira versão, com esta versão temos um <emphasis>teste automatizado</emphasis>.
  </para>

  <para>
    O objetivo de usar testes automatizados é cometer menos erros. Ainda que seu código não fique perfeito, mesmo com testes excelentes, você perceberá uma redução dramática nos defeitos assim que começar a automatizar os testes. Testes automatizados darão a você uma justificada confiança em seu código. Você poderá usar essa confiança para atravessar barreiras mais difíceis de design (Refatoração), melhorar as relações com sua equipe (Testes Inter-Equipes) e clientes, além de voltar para casa toda noite com a prova de que seu sistema está melhor agora do que estava de manhã, graças aos seus esforços.
  </para>
</chapter>
