<?xml version="1.0" encoding="utf-8" ?>

<chapter id="goals">
  <title>Objetivos do PHPUnit</title>

  <para>
    Até agora só tivemos dois testes para o <literal>vetor</literal> embutido e a função <literal>count()</literal> . Quando começarmos a testar as numerosas funções <literal>array_*()</literal> que o PHP oferece, precisaremos escrever um teste para cada um deles. Podemos escrever a infraestrutura para todos esses testes do zero, porém é muito melhor escrever uma infraestrutura de testes uma vez e então escrever apenas as partes únicas de cada teste. O PHPUnit é essa infraestrutura.
  </para>

  <para>
    Um framework como o PHPUnit tem que resolver uma série de restrições, sendo que algumas delas parecem sempre conflitar umas com as outras. Ao mesmo tempo, os testes devem ser:
  </para>

  <variablelist>
    <varlistentry>
      <term><emphasis>Fáceis de aprender a escrever.</emphasis></term>
      <listitem>
        <para>
          Se for difícil aprender a escrever testes, os desenvolvedores não aprenderão a escrevê-los.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Fáceis de escrever.</emphasis></term>
      <listitem>
        <para>
          Se os testes não forem fáceis de escrever, os desenvolvedores não vão escrevê-los.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Fáceis de ler.</emphasis></term>
      <listitem>
        <para>
          Os códigos de teste não devem conter cabeçalhos estranhos, de forma que o próprio teste não se perca no meio do "ruído" que o envolve.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Fáceis de executar.</emphasis></term>
      <listitem>
        <para>
          Os testes devem executar ao toque de um botão e apresentar seus resultados de uma forma clara e inequívoca.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Rápidos de executar.</emphasis></term>
      <listitem>
        <para>
          Testes devem executar tão rápido que possam ser executados centenas ou milhares de vezes por dia.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Isolados.</emphasis></term>
      <listitem>
        <para>
          Os testes não devem afetar uns aos outros. Se a ordem na qual os testes estão for alterada, os resultados dos testes não devem mudar.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Combináveis.</emphasis></term>
      <listitem>
        <para>
          Nós devemos ser capazes de executar qualquer quantidade ou combinação de testes juntos. Isso é uma consequência do isolamento.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    Existem dois principais conflitos nessas restrições:
  </para>

  <variablelist>
    <varlistentry>
      <term><emphasis>Fácil de aprender a escrever versus fácil de escrever.</emphasis></term>
      <listitem>
        <para>
          Testes geralmente não precisam de toda a flexibilidade de uma linguagem de programação. Muitas ferramentas de teste fornecem suas próprias linguagens que só incluem o mínimo necessário de funções para escrever testes. Os testes resultantes são fáceis de ler e escrever porque eles não têm o "ruído" para distrair você do conteúdo dos testes. Porém aprender mais uma linguagem de programação e ajustar as ferramentas é um inconveniente que tumultua a mente.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis>Isolado versus rápido de executar.</emphasis></term>
      <listitem>
        <para>
          Se você quer que os resultados de um teste não afetem os resultados de outro teste, cada teste deve criar o ambiente completo antes de começar a executar e retornar o ambiente ao seu estado original quando terminar. Porém ajustar o ambiente pode levar um longo tempo: por exemplo, conectar a um banco de dados e inicializá-lo para um estado conhecido usando dados realistas.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    O PHPUnit tenta resolver esses conflitos usando o próprio PHP como linguagem de testes. Algumas vezes o poder total do PHP é demais para escrever pequenos testes de uma só linha, mas ao usar PHP aproveitamos toda a experiência e ferramentas que os programadores já possuem. Já que estamos tentando convencer testadores desconfiados, quebrar a barreira de escrever esses testes iniciais é particularmente importante.
  </para>

  <para>
    O PHPUnit peca no lado do isolamento sobre execução rápida. Testes isolados são valiosos porque eles fornecem uma resposta de alta qualidade. Você não precisa pegar um relatório com uma porção de falhas, que foram de fato causadas por um teste da suíte que falhou lá no começo e deixou o resto do ambiente bagunçado pelo resto dos testes. Esta orientação através de testes isolados encoraja designs com um grande número de objetos simples. Cada objeto pode ser testado rapidamente em isolamento. O resultado é melhores designs e resultados mais rápidos.
  </para>

  <para>
    O PHPUnit assume que a maioria dos testes passam e não vale a pena informar os detalhes dos testes bem sucedidos. Quando um teste falha, é importante relatar esse fato. A grande maioria dos testes deve passar e não vale a pena comentá-los, mas contar o número de testes que executaram, vale. Esta é uma suposição realmente baseada nas classes de relatório, e não no núcleo do PHPUnit. Quando os resultados de um teste são relatados, você vê quantos deles foram executados, mas você só vê detalhes daqueles que falharam.
  </para>

  <para>
    Espera-se que os testes sejam refinados, testando cada aspecto de um objeto. Por isso, na primeira vez que um teste falha, a execução de testes é interrompida e o PHPUnit informa a falha. É uma arte testar executando vários testes pequenos. Testes refinados melhoram o design geral do sistema.
  </para>

  <para>
    Quando você testa um objeto com o PHPUnit, você só o faz através da interface pública dos objetos. Testar baseado apenas no comportamento público visível encoraja você a confrontar e resolver mais cedo problemas difíceis de design, antes que os resultados de um design pobre possam infectar grandes partes do sistema.
  </para>
</chapter>
